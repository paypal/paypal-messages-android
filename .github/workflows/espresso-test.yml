name: Espresso Test

on:
  push:
    branches:
      - feature-testing-tool
  pull_request:
    branches:
      - feature-testing-tool

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build APK
        run: ./gradlew assembleRelease

      - name: Upload AP to BrowserStack
        env:
          BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USERNAME }}
          BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}
        run: |
          APK_PATH=$(find . -name "*.apk" | head -n 1)
          curl -u "$BROWSERSTACK_USERNAME:$BROWSERSTACK_ACCESS_KEY" \
               -X POST "https://api-cloud.browserstack.com/app-automate/espresso/v2/app" \
               -F "file=@$APK_PATH"

          APP_URL=$(echo $UPLOAD_RESPONSE | jq -r '.app_url)

          curl -u "$BROWSERSTACK_USERNAME:$BROWSERSTACK_ACCESS_KEY" \
          -X POST "https://api-cloud.browserstack.com/app-automate/espresso/v2/test-suite" \
          -F "file=@$APK_PATH"
 
          # Extracting test_suite_name and test_suite_url
          TEST_SUITE_URL=$(echo $UPLOAD_RESPONSE | jq -r '.test_suite_url')
          
          # Use the test_suite_name and test_suite_url in another cURL request
          curl -u "$BROWSERSTACK_USERNAME:$BROWSERSTACK_ACCESS_KEY" \
              -X POST "https://api-cloud.browserstack.com/app-automate/espresso/v2/build" \
              -d "{\"app\": \"$APP_URL\", \"testSuite\": \"$TEST_SUITE_URL\", \"devices\": [\"Samsung Galaxy S9 Plus-9.0\"]}" \
              -H "Content-Type: application/json"
